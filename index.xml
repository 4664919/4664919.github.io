<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>simons blog</title>
    <link>http://blog.simonsun.net/</link>
    <description>Recent content on simons blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.simonsun.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>测试相关－golang</title>
      <link>http://blog.simonsun.net/golang-testing/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/golang-testing/</guid>
      <description>

&lt;h2 id=&#34;测试的重要性:8e22fa101fec99f1e092801dd3c0bfd1&#34;&gt;测试的重要性&lt;/h2&gt;

&lt;p&gt;体现一个技术人员的牛逼之处离不开bug率。而bug率的多寡也离不开测试。除了bug率,时间成本(可重复性)。也是重点之之一。码农陷入在改bug-&amp;gt;产生bug的怪圈中。而卓越的程序员一直在从卓越到更卓越的循环中。一个悲伤的故事：差距就这样拉开了。&lt;br /&gt;
本文所说测试不是手工测试，手工测试的成本高的可怕。手工测试不是测试,那是在做实验。只要有人的因素牵涉其中，那结果就必然可疑。测试并不能杜绝bug。但测试能保证程序的行为是符合预期的.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;测试可以分为很多种、叫法名字也不同。测试本身也是一个很宽泛的词。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;测试类别:8e22fa101fec99f1e092801dd3c0bfd1&#34;&gt;测试类别：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;功能测试、单元测试&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;覆盖率测试 code coverage&amp;gt;&lt;/li&gt;
&lt;li&gt;随机测试&lt;/li&gt;
&lt;li&gt;样本测试&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;基准/基线测试 base line testing / benchmark testing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;性能测试  performance test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;负载测试 load testing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;压力测试 stress testing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;稳定性测试[可靠性] scalability testing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;疲劳测试 endurance testing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;组合测试 combination testing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;远程/机房测试 remote/local testing&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;测试指标有哪些要关注的:8e22fa101fec99f1e092801dd3c0bfd1&#34;&gt;测试指标有哪些要关注的：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;每秒查询率[QPS Queries Per Second ]&lt;/li&gt;
&lt;li&gt;响应时间[Response Time]：&lt;/li&gt;
&lt;li&gt;服务器资源[]：&lt;/li&gt;
&lt;li&gt;吞吐量[TPS Transactions Per Second]：&lt;/li&gt;
&lt;li&gt;并发用户数&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;性能测试（可用性测试）    
主要是测试正常业务量下，成功率、每秒检索量、平均处理时间、服务器资源利用率。主要考察，该系统是否符合业务需求，能否达到上线要求。   &lt;/li&gt;
&lt;li&gt;压力测试    
测试峰值情况下，长时间连续运行系统给系统性能造成的影响。&lt;/li&gt;
&lt;li&gt;负载测试
测试不同并发数下，单机/单套系统的极限并发。&lt;/li&gt;
&lt;li&gt;容量测试    
主要是测试数据量非常大的情况下，内存、磁盘、访问性能。一般系统刚上线，数据量较小，性能一般没有什么问题，把数据放大到百万、千万量级，再测测系统，可能之前未能暴露的问题就出来了。   &lt;/li&gt;
&lt;li&gt;疲劳测试    
连续24小时以上测试，看有没有内存碎片和内存泄露等问题.&lt;/li&gt;
&lt;li&gt;配置测试    
不同参数下的性能，后台程序会有很多开关，需要测试主要的开关情况下对性能的影响，或者不同的参数数量对于性能的影响。比较简单的例子就是，索引长度设置为128和1024对于系统的性能究竟有多大的影响。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;并发用户数和QPS两个概念没有直接关系，但是如果要说QPS时，一定需要指明是多少并发用户数下的QPS，&lt;/p&gt;

&lt;h3 id=&#34;实际上性能是一个很很宽泛的词-系统出了问题大多归结为性能有问题-比如访问速度慢-占用资源过多-时不时宕机等等-但是这属于不同性能问题的范畴-而且测试方法也不尽相同-性能测试监控指标主要分为-资源指标和系统指标-资源指标与硬件资源消耗直接相关-而系统指标则与用户场景及需求直接相关:8e22fa101fec99f1e092801dd3c0bfd1&#34;&gt;实际上性能是一个很很宽泛的词，系统出了问题大多归结为性能有问题，比如访问速度慢，占用资源过多，时不时宕机等等，但是这属于不同性能问题的范畴，而且测试方法也不尽相同。&lt;em&gt;性能测试监控指标主要分为：资源指标和系统指标，资源指标与硬件资源消耗直接相关，而系统指标则与用户场景及需求直接相关&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.simonsun.net/upload/web-test.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;术语说明：
QPS = req/sec = 请求数/秒
【QPS计算PV和机器的方式】
QPS统计方式 [一般使用 http_load 进行统计]
QPS = 总请求数 / ( 进程总数 *   请求时间 )
QPS: 单个进程每秒请求服务器的成功次数&lt;/p&gt;

&lt;p&gt;单台服务器每天PV计算
公式1：每天总PV = QPS * 3600 * 6
公式2：每天总PV = QPS * 3600 * 8&lt;/p&gt;

&lt;p&gt;服务器计算
服务器数量 =   ceil( 每天总PV / 单台服务器每天总PV )&lt;/p&gt;

&lt;p&gt;【峰值QPS和机器计算公式】&lt;/p&gt;

&lt;p&gt;原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间
公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)
机器：峰值时间每秒QPS / 单台机器的QPS   = 需要的机器&lt;/p&gt;

&lt;p&gt;问：每天300w PV 的在单台机器上，这台机器需要多少QPS？
答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)&lt;/p&gt;

&lt;p&gt;问：如果一台机器的QPS是58，需要几台机器来支持？
答：139 / 58 = 3&lt;/p&gt;

&lt;p&gt;QPS提升带来什么？QPS提升说明单台服务器处理能力提升，如果QPS提升1倍，服务器资源减少1半，或者说服务器不变可以支撑2倍的请求量。
如何提升QPS？
1）减少CPU的使用时间（哪些代码会消耗CPU：循环、字符串拼接\查找\替换、编码\解码、序列化\反序列化、压缩）
2）增加CPU的数量
3）减少同步锁
（如果CPU不能被压到85%以上，并且此时的QPS已经达到了峰值，则说明另有瓶颈，接下去关注内存）
RT提升带来什么？
响应速度提升说明单词请求的处理速度提升，用户感觉任务处理速度更快，系统反应速度更快。当然在处理能力不变的情况下，RT的提升必然会提升QPS。
如何提升RT？
1）减少I/O的响应时间
2）减少I/O的调用次数
3）减少CPU使用时间（当然在I/O占大头的应用里，这方面优化效果肯定不明显）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>覆盖率测试－测试相关－golang</title>
      <link>http://blog.simonsun.net/golang-testing-code-coverage/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/golang-testing-code-coverage/</guid>
      <description>

&lt;h3 id=&#34;相关参数:4df3722ce16d4ff7fa64d0a0ba971114&#34;&gt;相关参数&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-cover&lt;/td&gt;
&lt;td&gt;-cover&lt;/td&gt;
&lt;td&gt;表示开启覆盖率&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-covermode&lt;/td&gt;
&lt;td&gt;-covermode=set&lt;/td&gt;
&lt;td&gt;覆盖率统计模式：   &lt;br&gt;set只记录是否执行过.  &lt;br&gt; count统计执行次数. &lt;br&gt;原子方式atomic统计执行次数.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-coverpkg&lt;/td&gt;
&lt;td&gt;-coverpkg pkg1,pkg2,pkg3&lt;/td&gt;
&lt;td&gt;统计覆盖测试其他包，多个以，号分隔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-coverprofile&lt;/td&gt;
&lt;td&gt;-coverprofile cover.out&lt;/td&gt;
&lt;td&gt;数据写入到指定文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;h3 id=&#34;demo:4df3722ce16d4ff7fa64d0a0ba971114&#34;&gt;DEMO&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
go test -cover -coverprofile cover.out ./logv3/
ok      xidibuy/logv3   0.010s  coverage: 65.1% of statements
&lt;/code&gt;&lt;/pre&gt;
cover.out 内容：
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
mode: set                                                                                                                                      
xidibuy/logv3/console.go:21.68,24.2 2 1
xidibuy/logv3/console.go:26.51,30.26 2 1
xidibuy/logv3/console.go:33.2,34.12 2 1
xidibuy/logv3/console.go:30.26,32.3 1 1
xidibuy/logv3/console.go:36.30,38.2 0 0
xidibuy/logv3/console.go:39.28,41.2 0 0
xidibuy/logv3/file.go:20.59,24.2 2 1
xidibuy/logv3/file.go:26.48,30.26 2 1
xidibuy/logv3/file.go:33.2,34.12 2 1
xidibuy/logv3/file.go:30.26,32.3 1 0
xidibuy/logv3/file.go:36.27,38.2 0 0
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上输出详情并不利于人来观看，可使用go tool 查看html格式的内容
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
go tool cover -html=cover.out
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;http://blog.simonsun.net/upload/golang-testing-code-coverage.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你好，Hugo</title>
      <link>http://blog.simonsun.net/welcome/</link>
      <pubDate>Wed, 23 Sep 2015 16:30:37 +0800</pubDate>
      
      <guid>http://blog.simonsun.net/welcome/</guid>
      <description>&lt;p&gt;这是使用Hugo创建的站点中的第一篇文章。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你好，Hugo2</title>
      <link>http://blog.simonsun.net/s/</link>
      <pubDate>Wed, 23 Sep 2015 16:30:37 +0800</pubDate>
      
      <guid>http://blog.simonsun.net/s/</guid>
      <description>&lt;p&gt;这是使用Hugo创建的站点中的第一篇文章。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/architecture%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/architecture%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;校长:技术成长四个阶段需要的架构知识
&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=406063297&amp;amp;idx=1&amp;amp;sn=0cd1fc5495e1e26471d7a4ffcd96cd0f&amp;amp;scene=0&amp;amp;key=b28b03434249256b87a3205a0ce9eb3072cff80abad4d034f85998222c6634f5b8dc902bf152b2fcf7350e2e1f325be3&amp;amp;ascene=0&amp;amp;uin=MTc0NTg4Nzc0MQ%3D%3D&amp;amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.11.3+build(15D21)&amp;amp;version=11020201&amp;amp;pass_ticket=raryIxNpwn282neBUxUUUienKC3%2FoHLL5k5MXpgtOZa0lAa2nn5uzc0RHHd5peGF&#34;&gt;https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=406063297&amp;amp;idx=1&amp;amp;sn=0cd1fc5495e1e26471d7a4ffcd96cd0f&amp;amp;scene=0&amp;amp;key=b28b03434249256b87a3205a0ce9eb3072cff80abad4d034f85998222c6634f5b8dc902bf152b2fcf7350e2e1f325be3&amp;amp;ascene=0&amp;amp;uin=MTc0NTg4Nzc0MQ%3D%3D&amp;amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.11.3+build(15D21)&amp;amp;version=11020201&amp;amp;pass_ticket=raryIxNpwn282neBUxUUUienKC3%2FoHLL5k5MXpgtOZa0lAa2nn5uzc0RHHd5peGF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/arithmetic-%E7%AE%97%E6%B3%95/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/arithmetic-%E7%AE%97%E6%B3%95/base/</guid>
      <description>&lt;p&gt;va 编程模型、
数据抽象、基本数据结构、集合类的抽象数据类型、算法性能分析的方法和一个案例分析。
第 2 章 排序
有序地重新排列数组中的元素是非常重要的基础算法。我们会深入研究各种排序算法,包括插
入排序、选择排序、希尔排序、快速排序、归并排序和堆排序。同时我们还会讨论另外一些算法, 它们用于解决几个与排序相关的问题,例如优先队列、选举以及归并。其中许多算法会成为后续章 节中其他算法的基础。
第 3 章 查找
从庞大的数据集中找到指定的条目也是非常重要的。我们将会讨论基本的和高级的查找算法, 包括二叉查找树、平衡查找树和散列表。我们会梳理这些方法之间的关系并比较它们的性能。
第 4 章 图
图的主要内容是对象和它们的连接,连接可能有权重和方向。利用图可以为大量重要而困难的 问题建模,因此图算法的设计也是本书的一个主要研究领域。我们会研究深度优先搜索、广度优先 搜索、连通性问题以及若干其他算法和应用,包括 Kruskal 和 Prim 的最小生成树算法、Dijkstra 和 Bellman-Ford 的最短路径算法。
第 5 章 字符串
字符串是现代应用程序中的重要数据类型。我们将会研究一系列处理字符串的算法,首先是对
字符串键的排序和查找的快速算法,然后是子字符串查找、正则表达式模式匹配和数据压缩算法。 此外,在分析一些本身就十分重要的基础问题之后,这一章对相关领域的前沿话题也作了介绍。
第 6 章 背景
这一章将讨论与本书内容有关的若干其他前沿研究领域,包括科学计算、运筹学和计算理论。 我们会介绍性地讲一下基于事件的模拟、B 树、后缀数组、最大流量问题以及其他高级主题,以帮 助读者理解算法在许多有趣的前沿研究领域中所起到的巨大作用。最后,我们会讲一讲搜索问题、 问题转化和 NP 完全性等算法研究的支柱理论,以及它们和本书内容的联系。&lt;/p&gt;

&lt;p&gt;目前(略读)读到：&lt;/p&gt;

&lt;p&gt;算法完全版－257
aha算法 读完&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/bug%E7%9A%84%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/bug%E7%9A%84%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96/</guid>
      <description>&lt;p&gt;bug从哪来&lt;/p&gt;

&lt;p&gt;造成bug的原因&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;程序员本身.不负责bug光环&lt;/li&gt;
&lt;li&gt;产品bug&lt;/li&gt;
&lt;li&gt;需求变更&lt;/li&gt;
&lt;li&gt;技术bug&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如何避免bug&lt;/p&gt;

&lt;p&gt;自动化测试[
    随机测试
    &amp;hellip;
]
没有银弹&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/eight-queens-puzzle-testing-with-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/eight-queens-puzzle-testing-with-language/</guid>
      <description>

&lt;p&gt;title: 八皇后问题在各语言下执行时间测试
tags:
  - 数据结构
  - 性能
  - 测试
  - 算法&lt;/p&gt;

&lt;h2 id=&#34;date-2015-05-07-17-52-10:0fc52dc52cd09d55edbc1c2b05363e2a&#34;&gt;date: 2015-05-07 17:52:10&lt;/h2&gt;

&lt;h3 id=&#34;新增-2015-09-06-17-32-28:0fc52dc52cd09d55edbc1c2b05363e2a&#34;&gt;新增 - 2015-09-06 17:32:28&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;由于测试代码未保留（测试的时候直接存/tmp了）导致没有源代码，故也就没有后续了。。。&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;前几天公司内部同事想测试下语言的效率，当时使用八皇后问题进行测试（实际应用中代码都为九皇后），&lt;/p&gt;

&lt;p&gt;目前测试覆盖的代码有 C,GO,JAVA,PHP&lt;/p&gt;

&lt;p&gt;待写测试代码的有：PYTHON,RUBY,NODEJS,JS&lt;/p&gt;

&lt;p&gt;目前效率最高的是C语言，其次是GO，然后是JAVA，最慢的是PHP&lt;/p&gt;

&lt;p&gt;其中C语言在优化后可达到1毫秒，未优化2毫秒&lt;/p&gt;

&lt;p&gt;GO运行在2-3毫秒之间&lt;/p&gt;

&lt;p&gt;JAVA为4毫秒&lt;/p&gt;

&lt;p&gt;PHP达到80毫秒左右，开APC达到56毫秒，通过查看OPCODE各种优化达到40毫秒（这时候已经影响到可读性了）&lt;/p&gt;

&lt;p&gt;附效率截图：&lt;/p&gt;

&lt;p&gt;优化后的C&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.simonsun.net/upload/eight-queens-puzzle-testing-with-language-optimize-c.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;未优化的C&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.simonsun.net/upload/eight-queens-puzzle-testing-with-language-c.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;JAVA&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.simonsun.net/upload/eight-queens-puzzle-testing-with-language-java.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;开启APC后的PHP&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.simonsun.net/upload/eight-queens-puzzle-testing-with-language-apc-php.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;未开启APC的PHP&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.simonsun.net/upload/eight-queens-puzzle-testing-with-language-php.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;golang:&lt;/p&gt;

&lt;p&gt;total results: 352
total time: 2&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/english-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87%E7%9A%84%E5%A5%A5%E7%A7%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/english-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87%E7%9A%84%E5%A5%A5%E7%A7%98/</guid>
      <description>

&lt;p&gt;第一部分124个词
第二部分125-252 个词
第三部分:page 308－347
第四部分:page 347-423&lt;/p&gt;

&lt;h1 id=&#34;词根:4a79cc836e36abf0d14b07014fbd72c3&#34;&gt;词根&lt;/h1&gt;

&lt;h2 id=&#34;掌握词根-分析单词:4a79cc836e36abf0d14b07014fbd72c3&#34;&gt;掌握词根，分析单词&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ag
ag = do ,act 做，动&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;agent
agency
cogent&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;agri
agri = field 田地，农田
agri 也作 agro,agr&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;agrestic
agriculture
agronomy&lt;/p&gt;

&lt;p&gt;3.ann
ann = year年
ann 也作 enn&lt;/p&gt;

&lt;p&gt;annals
perennial&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;audi
audi = hear 听
audi 也作 audit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;audit
auditor
audio&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;bell
bell = war 战争&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;rebel
bellicose
bellicism&lt;/p&gt;

&lt;p&gt;6.brev
bred = short 短&lt;/p&gt;

&lt;p&gt;brevity
brief
breviary&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ced
red = go 行走
ced也作ceed cess&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;exceed
proceed
process
success&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cept
cept = take 拿，取&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;except
accept
incept&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cid,cis
cid,cis = cut,kill 切，杀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;decide
decidable
incise&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;circ
circa = ring 环，圆&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;circular
circus
encircle&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;claim,clam
claim,clam = cry,shout 喊叫&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;exclaim
acclaim
declaim&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;clar
clar = clear 清楚明白&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;declare
declarer
clarity&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;clud
clud = close,shut 关闭
clud也作clus&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;exclude
include
seclude&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cogn
cogn = know 知道&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;cognition
cognize
cognizant&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cord
cord = heart 心&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;record
recorder
discord
accord&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;corpor
corpor = body 体
corpor 也作 corp&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;corporate
corporal
incorporation&lt;/p&gt;

&lt;p&gt;17.cred
cred = believe,trust 相信，信任&lt;/p&gt;

&lt;p&gt;credible
incredible
credit
creed&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cruc
cruc = cross 十字&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;crucial
crucise
excruciate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cur
cur = care 关心，挂念，注意&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;secure
curious
curable&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;cur,curs,cour,cours
cur,curs,cour,cours = run 跑
courser
occurrent
excure&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dent
dent = tooth 牙齿&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;dentist
dental
bident&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;di
di = day 日&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;diary
dial
meridian
antemeridian&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;dict
dict = say 言，说
dict 也作 dic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;dictation
dictate
contradiction&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;dit
dit = give 给&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;edit
editor
editorship&lt;/p&gt;

&lt;p&gt;25.don
don = give 给
don 也作 do&lt;/p&gt;

&lt;p&gt;pardon
pardoner
donee&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;du
du = two 二&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;dual
dualize
duet&lt;/p&gt;

&lt;p&gt;27.duc
duc , duct = lead 引导&lt;/p&gt;

&lt;p&gt;educate
conduct
produce&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ed
ed = eat 吃&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;edible
inedible
edacity&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;equ
equ = equal 等，均，平&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;equal
equality
adequate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ev
ev = age 年龄&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;longevity
coeval
primeval&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fact
fact = do,make 做
fact 也作 fac&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;factory
benefactor
facile&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fer
fer = bring,carry 带，拿&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;confer
differ
prefer&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;flor
flor = flower 花
flor 也作 flour&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;florid
floral
defloration&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;flu
flu = flow 流&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;fluent
fluency
influenza&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fus
fus = pour 灌，流，倾泻&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;refuse
refusal
diffusion&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;grad
grad = step,go,grade 步，走，级&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;gradual
retorgrade
degrade&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;gram
gram = write,something,written or drawn 写，画，文字，图形&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;grammar
grammarian
kilogram&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;graph
graph = write,writing,an instrument for making records 写，画，图形，记录器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;photograph
geography
biography&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;gress
gress = go,walk 行走&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;progress
retrogress
congressional&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;habit
habit = dwell 居住&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;habitable
inhabit
cohabit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hibit
hibit = hold 拿，持&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;exhibit
inhibit
prohibit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hospit
hospit = guset&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;hospital
hospitable
inhospitable&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;idio
idio = peculiar,own,private,proper 特殊的，个人的，专有的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;idiom
idiot
idiocy&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;insul
insul = island 岛&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;peninsula
peninsular
insulate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;it
it = go 行走&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;exit
initial
transit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ject
ject = throw 投掷&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;project
inject
subject&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;juven
juven = young 年轻，年少&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;juvenile
juvenility
rejuvenator&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;lect
lect = choose,gather 选，收
lect 也作 leg,lig&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;select
selection
intellect&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;lev
lev = raise 举，升&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;elevate
elevation
relieve&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;liber
liber = free 自由&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;liberate
liberty
liberal&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;lingu
lingu = language 语言&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;collingual
linguist
linguist&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;liter
liter = letter 文字，字母&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;literate
literacy
bilateral&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;loc
loc = place 地方&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;local
localism
dislocate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;log
log = speak 言，说&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;dialogue
eulogy
monologue&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;loqu
loqu =speak 言，说&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;eloquent
soliloquy
obloquy&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;lun
fun = moon 月亮&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;lunar
semilunar
lunet&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;man
man = dwell , stay 居住停留&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;manor
manorial
remain&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;manu
manu = hand 手&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mannscript
manufacturer
manual&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mar
mar = sea 海&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;marine
mariner
marigraph&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;medi
media = middle 中间&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;immediate
medium
medial&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;memor
memor = memory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;memory
memorial
immemorial&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;merg
merg = dip,sink 沉，没
merg 也作 mers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;emerge
emergence
emergent&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;migr
migr = remove,move 迁移&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;emigrate
migrant
immigrate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;milit
milit = soldier 兵&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;militia
military
hypermilitant&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mini
mini = small,little 小
mini 也作 min&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;minister
ministry
minim&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mir
mir = wonder 惊奇，惊异&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mirror
admire
miracle&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;miss
miss = send 投，送，发
miss 也作 mit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;missile
dismiss
manumit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mob
mob = move 动&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mobile
demobilize
mob&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mort
mort = death 死&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mortal
immortal
postmortem&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mot = move 移动，动&lt;/p&gt;

&lt;p&gt;motion
motive
promote&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;nomin
nomin = name 名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;nominal
nominate
ignominy&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;nov
nov = new 新&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;novel
innovate
renovate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;numer
number = number 数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;numeral
numerator
enumerate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;onym
onym = name 名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;anonym
anonymity
synonym&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;oper
oper = work 工作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;operate
operator
cooperative&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ori
ori = rise 升起&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;orient
oriental
origin&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;paci
paci = peace 和平，平静&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;pacific
pacify
pacifier&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pel
pel = push,drive 推，逐，驱&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;propel
propeller
expel&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pend
pend,pens = hang 悬挂&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;depend
dependent
suspend&lt;/p&gt;

&lt;p&gt;pend,pens = weigh 称量&lt;/p&gt;

&lt;p&gt;dispense
ponder
ponderable&lt;/p&gt;

&lt;p&gt;pend,pens =pay 付钱，支出，花费&lt;/p&gt;

&lt;p&gt;expend
expenditure
pension&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pet
pet = seek 追求&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;compete
competition
competitive&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;phon
phon = sound 声音&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;telephone
microphone
phonic&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pict
pict = paint 画，描绘&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;picture
picturize
depict&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;plen
plen = full 满，全&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;plenty
plentiful
plenitude&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;plic
plic = fold 折，重叠&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;complicate
explicable
duplicity&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pon
pon = put 放置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;postpone
antepone
component&lt;/p&gt;

&lt;p&gt;popul
popul = people 人民&lt;/p&gt;

&lt;p&gt;population
populous
populate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;port
port = carry 拿，带，运&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;portable
import
export&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pos&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;pos = put 放置&lt;/p&gt;

&lt;p&gt;expose
compose
oppose&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;preci
preci = price 价值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;precious
appreciate
appreciative&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;punct
punct = point,prick 点，刺&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;punctuate
punctate
punctual&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pur
pur = pure 清，纯，净&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;purify
purification
purism&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;rect
rect = right,straight 正，直&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;correct
corrective
rectify&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;rupt
rupt = break 破&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;rupture
interrupt
corrupt&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sal
sal = salt 盐&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;salary
salad
saline&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scend
scend,scens = climb 爬，攀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ascend
ascent
descent&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sci
sci = know 知&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;science
scientist
consciousness&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sec,sequ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sec,sequ = follow 跟随&lt;/p&gt;

&lt;p&gt;second
sequence
sequent&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sect
sect = cut 切割&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;insect
sectile
bisect&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sent
sent,sens = feel 感觉&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;consent
dissent
resent&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sid
sid = sit 坐&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;preside
president
reside&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sist
sist = sand 站立&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;consist
assist
exist&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;son
son = sound 声音&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sonic
subsonic
resonator&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;spect
spect = look 看&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;spectacle
prospect
inspect&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;spir
spir = breathe 呼吸&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;conspire
expire
respire&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tail
tail = cut 切割&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;tailor
detail
retail&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tain,tan,tin
tain,ten,tin = hold 握，持，守&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;contain
obtain
tenant&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tect
tect = cover 掩盖&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;detect
protector
unprotected&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tele
tele = far 远&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;telecontrol
telescope
telephone&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tempor
tempor = time 时&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;temporary
contemporary
extemporize&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tend
tend tens,tent = stretch 伸&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;extend
extensive
attend&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;terr
terr = earth,land 土地，陆地&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;territory
territorial
inter&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;text
text = weave 编织&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;textile
texture
text
context&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tract
tract = draw 拉，抽，引&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;tractor
attract
protract&lt;/p&gt;

&lt;p&gt;un
un = one
un 也作 uni&lt;/p&gt;

&lt;p&gt;unite
united
unitive&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;urb
urb = city 城市&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;suburb
suburban
suburbanize&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vac
vac = empty 空
vac 也作 vacu&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;vacation
vacancy
vacate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vad
vad vas = walk,go 行走&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;invader
invade
invasive&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vari
vari = change 改变&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;variable
invariable
various&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ven
ven = come 来&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;intervene
intervention
convene&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vert
vert , vers = turn 转&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;advertise
subvert
divert&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vi, via
vi,via = way&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;obvious
trivial
deviate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vis
vis,vid = see 看&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;visible
invisible
visitor&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vit
vit = life 生命&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;vital
devitalize
avitaminosis&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viv
viv = live 活&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;survive
survival
vivisect&lt;/p&gt;

&lt;h2 id=&#34;多认词根-多识单词:4a79cc836e36abf0d14b07014fbd72c3&#34;&gt;多认词根，多识单词&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;aer[0] 空气，空中，航空&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;aerial
aerology
aerogram&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;alt 高
alto
exalt
altar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;am 爱
[am爱 ateur ＝ ator 表示人] 业余爱好者&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;amatory
amateurish
amour&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ambul 行，走&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ambulannce&lt;/p&gt;

&lt;p&gt;page=page - 21
page:120
page:138
page:172&lt;/p&gt;

&lt;h1 id=&#34;单词的附件-词缀:4a79cc836e36abf0d14b07014fbd72c3&#34;&gt;单词的附件－词缀&lt;/h1&gt;

&lt;h2 id=&#34;前缀:4a79cc836e36abf0d14b07014fbd72c3&#34;&gt;前缀&lt;/h2&gt;

&lt;h2 id=&#34;后缀:4a79cc836e36abf0d14b07014fbd72c3&#34;&gt;后缀&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/english/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/english/</guid>
      <description>

&lt;h1 id=&#34;字母发音的重要性:b6b595a68cd480ac7859f3dfec888e20&#34;&gt;字母发音的重要性&lt;/h1&gt;

&lt;p&gt;说到这，先简单介绍下【自然拼读法】吧。
具体的官方介绍可以自己搜百度。
摘自百度百科的：
英语自然拼读法通过直接学习26个字母及字母组合在单词中的发音规则，建立字母及字母组合与发音的感知，让学生在轻松愉快的氛围中，了解和学习英语字母组合的奥妙，掌握英语拼读规律，从而达到看到单词就会读，听到单词就会拼的学习目的。
对于大多数英语初学者，自然拼读法是一门实用的工具与方法，如能掌握，不需要借助音标，就都能够读出80%的英语单词，把枯燥无味的背单词变成一件简单的事，从而达到事半功倍的效果。&lt;/p&gt;

&lt;p&gt;通俗点的解释就是：
26个字母的发音规律就跟我们的拼音是一个道理。
也就是说，每个字母在单词中都会有相应的发音规律，那么当几个字母组成一个单词时，我们就可以像拼拼音一样，通过字母的发音规律而把单词拼读出来。
就像，如果你懂了拼音，看到拼音组合在一起时，就会自然而然的拼读出来一样。&lt;/p&gt;

&lt;p&gt;接下来举个例子。
例如a，在单词钟大部分发梅花音/æ/，apple，ant（蚂蚁），ax（斧头），这就是一个发音规律。那么如果掌握了这个发音规律，当你听到 /æ/ 的发音的时候，就会想到可能单词里面就有a这个字母。
如此下来，总共英语就26个字母，那么你把26个字母的发音规律都掌握了，
当听到一些比较简单的单词的时候，脑海里就会潜意识的把单词给拼写出来了。
单词也就自然而然的记住了。&lt;/p&gt;

&lt;p&gt;比如讲个难点的单词 [ trəˈdɪʃən ] ，如果听到这个单词，该如何拼写。
首先把音节分开，/trə/，能发/tr/字母的组合里面，就只有tr，tr后面能发/ə/的音里面字母就大概只有a了。
那么前面三个字母就是tra， 接下来及时/di/，这个大部分一听都没问题，绝对是di两个字母。
最后/ʃən/ ，这是一个英文非常常见的字母组合，看到这个学过音标的人，想都不用想就知道一定是tion这个字母组合。
其实这些都是最基础的音标发音规则。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/github/</guid>
      <description>

&lt;p&gt;搜索高级技巧：
搜索星级排行
stars:&amp;gt;1000
例如：&lt;a href=&#34;https://github.com/search?l=Go&amp;amp;q=stars%3A%3E1000&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34;&gt;https://github.com/search?l=Go&amp;amp;q=stars%3A%3E1000&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;搜索中国用户
location:China
&lt;a href=&#34;https://github.com/search?q=location%3AChina&amp;amp;ref=searchresults&amp;amp;type=Users&amp;amp;utf8=%E2%9C%93&#34;&gt;https://github.com/search?q=location%3AChina&amp;amp;ref=searchresults&amp;amp;type=Users&amp;amp;utf8=%E2%9C%93&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使用技巧:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;使用技巧&lt;/h1&gt;

&lt;p&gt;#基础命令
git init 创建新的仓库
git clone 把仓库克隆到本地&lt;/p&gt;

&lt;p&gt;git add 添加文件到本地仓库
git status 查看当前状态
git diff 对比
git commit 提交到本地仓库
git reset HEAD 猜测为 revert
git rm 删除
git mv 挪动
git log 查看提交历史&lt;/p&gt;

&lt;h1 id=&#34;分支:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;分支&lt;/h1&gt;

&lt;p&gt;git branch (branchname) 创建分支
git checkout (branchname) 切换分支
git merge  合并分支&lt;/p&gt;

&lt;p&gt;git branch 列出分支
git branch -d (branchname)  删除分支&lt;/p&gt;

&lt;h1 id=&#34;tag:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;tag&lt;/h1&gt;

&lt;p&gt;git tag -a v1.0&lt;/p&gt;

&lt;p&gt;#远程仓库
git remote 查看远程仓库
git fetch 从远程仓库下载新分支与数据：
git pull  从远端仓库提取数据并尝试合并到当前分支&lt;/p&gt;

&lt;p&gt;#diff
    尚未缓存的改动：git diff
    查看已缓存的改动： git diff &amp;ndash;cached
    查看已缓存的与未缓存的所有改动：git diff HEAD
    显示摘要而非整个 diff：git diff &amp;ndash;stat
#log
    我们可以用 &amp;ndash;oneline 选项来查看历史记录的简洁的版本。
    我们还可以用 &amp;ndash;graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：
    你也可以用 &amp;lsquo;&amp;ndash;reverse&amp;rsquo;参数来逆向显示所有日志。
    如果只想查找指定用户的提交日志可以使用命令：git log &amp;ndash;author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：
    如果你要指定日期，可以执行几个选项：&amp;ndash;since 和 &amp;ndash;before，但是你也可以用 &amp;ndash;until 和 &amp;ndash;after。&lt;/p&gt;

&lt;h1 id=&#34;tab:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;tab&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;  -a 选项意为&amp;quot;创建一个带注解的标签&amp;quot;。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/golang-daemon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/golang-daemon/</guid>
      <description>

&lt;p&gt;title: golang 守护进程 daemon 实现方式
tags:
  - golang
  - daemon
  - 守护进程&lt;/p&gt;

&lt;h2 id=&#34;date-2015-05-07-17-51-12:0c0705ff9f709abf9a574c9ef808216c&#34;&gt;date: 2015-05-07 17:51:12&lt;/h2&gt;

&lt;p&gt;技术点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;执行代码增加了一个开关，用来判断是否已经是daemon形式启动了&lt;/li&gt;
&lt;li&gt;使用linux内置守护进程运行命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体逻辑：&lt;/p&gt;

&lt;p&gt;程序在刚启动的时候包中init函数优先执行，执行后验证是否存在守护进程开关，如果存在并且当前进程不是守护进程模式则使用守护进程方式启动应用并退出当前进程&lt;/p&gt;

&lt;p&gt;需要注意的：golang的flag包的逻辑是所有参数必须都是flag方式，否则就不解析。我在做的时候是有非flag方式的，所以只能自己动手丰衣足食了&lt;/p&gt;

&lt;p&gt;伪代码示例：&lt;/p&gt;

&lt;p&gt;包：&lt;/p&gt;

&lt;p&gt;func init(){&lt;/p&gt;

&lt;p&gt;//验证是否存在守护进程开关&lt;/p&gt;

&lt;p&gt;if daemon_args_exist(){&lt;/p&gt;

&lt;p&gt;//当前进程不是守护进程模式&lt;/p&gt;

&lt;p&gt;if ! is_daemon_progress() {&lt;/p&gt;

&lt;p&gt;//守护进程方式启动应用&lt;/p&gt;

&lt;p&gt;star_daemon()&lt;/p&gt;

&lt;p&gt;//并退出当前进程&lt;/p&gt;

&lt;p&gt;os.Exit(0)&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;应用入口main：&lt;/p&gt;

&lt;p&gt;import(&lt;/p&gt;

&lt;p&gt;//只要引入包即可，无需其他操作&lt;/p&gt;

&lt;p&gt;_ “xidibuy/daemon&amp;#8221;&lt;/p&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;另外下面传送门的这个git是有bug的，当有参数不全部为flag的时候，就会失效。&lt;/p&gt;

&lt;p&gt;思路参考了： &lt;a href=&#34;http://github.com/icattlecoder/godaemon&#34;&gt;github.com/icattlecoder/godaemon&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/golang-flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/golang-flag/</guid>
      <description>

&lt;p&gt;title: golang使用flag中遇到的问题
tags:
  - golang
  - flag&lt;/p&gt;

&lt;h2 id=&#34;date-2015-09-06-16-59-30:b466e8f2132e47affd6bf66f8fd23a0b&#34;&gt;date: 2015-09-06 16:59:30&lt;/h2&gt;

&lt;h1 id=&#34;关于flag:b466e8f2132e47affd6bf66f8fd23a0b&#34;&gt;关于flag&lt;/h1&gt;

&lt;p&gt;在开发golang项目中，有用到flag。在使用中遇到一些问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;多次解析flag，会覆盖之前的：&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;出现的具体问题:b466e8f2132e47affd6bf66f8fd23a0b&#34;&gt;出现的具体问题：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在开发项目包中&lt;a href=&#34;http://blog.simonsun.net/golang-daemon.html&#34;&gt;守护进程 daemon 实现方式 &lt;/a&gt;、&lt;a href=&#34;http://blog.simonsun.net/golang-pprof.html&#34;&gt;关于golang性能调试&lt;/a&gt; 两个包会有冲突：如果有多个flag的parse函数，只首次运行的parse管用.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码示例：
包a:
{% codeblock lang:golang %}
func init() {
    if daemon_args_exist() {
        flag.Parse()&lt;br /&gt;
        &amp;hellip;
    }&lt;br /&gt;
}
{% endcodeblock %}&lt;/p&gt;

&lt;p&gt;包b:
{% codeblock lang:golang %}
func parseProfFlags() {
    if !flag.Parsed() {&lt;br /&gt;
        flag.Parse()
    }&lt;br /&gt;
    &amp;hellip;
}&lt;/p&gt;

&lt;p&gt;{% endcodeblock %}&lt;/p&gt;

&lt;h3 id=&#34;如何解决:b466e8f2132e47affd6bf66f8fd23a0b&#34;&gt;如何解决&lt;/h3&gt;

&lt;p&gt;虽然加了一些简单判断，其实是没有解决实际问题。根据golang的flag包，程序需要保证只执行一次parse，但是在daemon的程序中，初始化的时候有可能直接中断程序，故也需要一些开关来判断在什么时候执行parse。 其他包则是在主函数中程序初始化完毕后，加载flag.Parse()即可解决。&lt;/p&gt;

&lt;p&gt;包main:
{% codeblock lang:golang %}
func main(){
    &amp;hellip;
    //基准包初始化
    base.Init()
    //数据包初始化
    data.Init()
    &amp;hellip;
    //开始执行flag.Parse()
    var f *SFlag.Flag = SFlag.GetFlag()
    f.Parse()
    &amp;hellip;
}
{% endcodeblock %}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/golang-fmt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/golang-fmt/</guid>
      <description>&lt;p&gt;Printf有一大堆这种转换，Go语言程序员把这些叫做verb（动词）。下面的表格列出了常用的动词，当然了不是全部，但基本也够用了。&lt;/p&gt;

&lt;p&gt;%d          int变量
%x, %o, %b  分别为16进制，8进制，2进制形式的int
%f, %g, %e  浮点数： 3.141593 3.141592653589793 3.141593e+00
%t          布尔变量：true 或 false
%c          rune (Unicode码点)，Go语言里特有的Unicode字符类型
%s          string
%q          带双引号的字符串 &amp;ldquo;abc&amp;rdquo; 或 带单引号的 rune &amp;lsquo;c&amp;rsquo;
%v          会将任意变量以易读的形式打印出来
%T          打印变量的类型
%%          字符型百分比标志（%符号本身，没有其他操作）&lt;/p&gt;

&lt;p&gt;请注意fmt的两个使用技巧。通常Printf格式化字符串包含多个%参数时将会包含对应相同数量的额外操作数，但是%之后的[1]副词告诉Printf函数再次使用第一个操作数。第二，%后的#副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.simonsun.net/golang-gc-crash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.simonsun.net/golang-gc-crash/</guid>
      <description>&lt;p&gt;发现一个坑&lt;/p&gt;

&lt;p&gt;坑的具体描述：由于程序有一个性能bug，会并发一直去数据池中取数据，而数据池中数据插入量少&lt;/p&gt;

&lt;p&gt;最后问题是golang crash，抱错说内存找不到。&lt;/p&gt;

&lt;p&gt;然后我debug 内存地址，发现在数据池中的时候，内存地址是存在的，等取出来内存地址为空。&lt;/p&gt;

&lt;p&gt;至此怀疑是gc把内存清掉了。&lt;/p&gt;

&lt;p&gt;最后解决办法： 解决性能问题，当数据池中无数据的时候，进程先停一下，不干活&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>